q1.retreive all the category names under the parent category_id=1(use sub query)?
select name from categories where category_id in (select category_id from categories where parent_category=1);


q2.retreive all products in the iphone and laptops category(use sub queries)?
select name from products  where category_id in(select category_id from categories where name in('iphones','laptops'));


q3.retreive all products with prices greater than any product on the console category?
select category_id from categories where name='consoles'; (category id)
select price from products where category_id=(select category_id from categories where name ='consoles'); (price)
select * from products where price> any (select price from products where category_id=(select category_id from categories where name ='consoles'));

q4.reterive all product with prices greater than all products in console category?
select * from products where price> all (select price from products where category_id=(select category_id from categories where name ='consoles'));

q5.reterive all categories that are having any products?


EXISTS AND NOT EXISTS;

select * from categories as c where exists(select * from products as p where p.category_id=c.category_id);
select * from categories as c where not exists(select * from products as p where p.category_id=c.category_id);

AUTO INCREMENT:
alter table products modify product_id int auto_increment;

member(varchar(20))->member ENUM

UNION OPERATION
------------
IT AUTOMATICAL ELIMINATE ITS DUPLICATE

UNIONALL
-------


q6.reterive all category name and product name?
select name from categories union select name from products;
select name from categories union all select name from products;


VIEWS
------
view is known as virtual table.
table is an physical object but view is a logical object.
it gives security purpose 
if we take a join data in multiple tables we can create view
whenever use view that will work it cannot store in any database

select * from categories join products on categories.category_id=products.category_id;(X)
select * from categories left outer join products on categories.category_id=products.category_id;

 create view product_category as(select c.category_id,c.name as category_name,c.parent_category,p.product_id,p.name as product_name,p.price,p.quantity from categories as c  left outer join products as p on c.category_id=p.category_id);

select * from product_category;

STORED FUNCTIONS
---------------

PL/SQL(LANGUAGE)

CREATE FUNCTION<FN>(ARGUMENTS GIVEN Eg:CAT_ID INT,,,,,(<ATTRIBUTE NAME><DATATYPE>))
RETURNS VARCHAR -> This is a function header
BEGIN
DECLARE CAT_NAME VARCHAR(50)
------------
----------
END

eg:DELIMITER $$
CREATE FUNCTION GETCATEGORYNAME(CAT_ID INT)
RETURNS VARCHAR(50)
BEGIN
DECLARE CAT_NAME VARCHAR(50);
SELECT NAME INTO CAT_NAME FROM CATEGORIES WHERE CATEGORY_ID=CAT_ID;
RETURN(CAT_NAME);
END$$
DELIMITER;

TRIGER-is a kind of function.but automatical executed(automatical call in database)
whenever a event occur it will automatical call
update,insert,delect these are all functions(events)
there is no return.it is a group of functions















